import socket
import threading
import hmac
import hashlib
def encrypt(text, key):
    e_message = ""
    for i in text:
        if i.isalpha():
            upper_case = i.isupper()
            l_change = chr((ord(i) - ord('A' if upper_case else 'a') + key) % 26 + ord('A' if upper_case else 'a'))
            e_message += l_change
        else:
            e_message += i
    return e_message

def decrypt(text, key):
    return encrypt(text, -key)

def HMAC_cal(key,message):
  key = key.to_bytes((key.bit_length()+7)//8,"big")
  message = bytes(message,"utf-8")
  hashing = hmac.new(key,message,hashlib.sha512)
  return hashing.hexdigest()
def threading_clients(client_socket, name_c):
    while True:
        respon = client_socket.recv(1024).decode()
        decrypted_respon = decrypt(respon,key)
        print(name_c, "message: ", decrypted_respon)
        print("message is received successfully :")
        message = input("enter the message: ")
        encrypted_message = encrypt(message,key)
        hmac_value = HMAC_cal(key,message)
        client_socket.send(bytes(hmac_value + encrypted_message, "utf-8"))
        print("message is sent successfully !!")
        if decrypted_respon.lower == "exit":
            break
    client_socket.close()
number_c = int(input("enter the client connection: "))
server_socket = socket.socket()
print("socket is created")
server_socket.bind(("localhost", 8888))
server_socket.listen(number_c)
print("waiting for connection")
key = 15  # option user input
client_threads = []

while True:
    client_socket, addr = server_socket.accept()
    client_socket.send(bytes("you connected to the server_socket ","utf-8"))
    #client_socket.send(bytes("the encrypt and decrypt key is :","utf-8"))
    #client_socket.send(bytes(str(key),"utf-8"))
    name_c = client_socket.recv(1024).decode()
    print("connected with: ", name_c, addr)
    client_T = threading.Thread(target=threading_clients, args=(client_socket, name_c))
    client_threads.append(client_T)
    client_T.start()
